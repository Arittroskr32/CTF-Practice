from Crypto.Util.number import long_to_bytes, bytes_to_long
from sympy import mod_inverse

p = 134669927709128070756424801419548805501808076912262801434800605920827612464368906595661348393409080650056282638489243851059781971132159889896843018381187994628859917822755789986092763460463295405651440816348815008245093856412009397970192375577360567873185141159375280522236909060526334123001733587717969177157
q = 173121513995818161102245832683211062320154182361182024148671930683926870711405647497524667705258311163551127156955342410807842326402024536548989691926348678692995530897791794818646241971728281417961389048493180792474943296919266335463768525410560161755731138916915767148609523790355387780727531897114371948649

# Given values
N = 23314261774711635287199613322625299631998299531668574856054445891367514103118788671741746880773471358355043843424178957765687991051382738221889741391209910265414558275853987805928032540504091325882973089325788388764059748141908558032906355962434381133814683631259503022678117195972953901341152390082323332013081727028250772610795079682074032005674396787209080870144904438012362544373403906582078249640767748443695976768936365312724837274503878342188073955100351982119862045062809973110618490322000848950789796929040191128376295484446101182115221654618310291664010793027421046736723687597493681537019384653365187810893
e = 19530226410043970810725557003435543135763530881424210248055253789146116962119210614869432985570865118752985919383689598525891574886387777910656552352995376444381466131799115118821582068507614159079491660471660498703856657100219432169415694357051026653501587627161359216917068611699460388404704994020658035113867704564864520447628130219204036115956229378374533904177298511420691232986523029437427813718184752726121102827577815324799236044788791890210324092921530775467785171769947364981150722141109135873933436026419757925700203197178661307541794973688656649796675223608169318604829628635422095313615753614708538760163
ct = 8028121224227573051828850229994462997334629895742133475980102822209497303556216779775942543561944932524150303356432654518807957178569209410177254952777287867269725600174363472416920972657180694221524823357993311941711660626697551627760577426753521788921114199242994421027253907973286593309748059366733997153548521855813763130272553602724942731498310511847885977497728649159363241087645689831666350800348400155464399327635456578067757425624251823026377947503169196936361131843633441040763103641837689196421514573226485717472879713606424296498797414793405914833918934223936424519120394289446392279412227764722289357940

# Step 1: Check if p and q are provided
if p is None or q is None:
    print("Please provide the values of p and q, as factorization of N is infeasible with the current setup.")
else:
    # Step 2: Compute φ(N) = (p-1)(q-1)
    phi_N = (p - 1) * (q - 1)

    # Step 3: Compute the private key d (modular inverse of e mod φ(N))
    d = mod_inverse(e, phi_N)

    # Step 4: Decrypt the ciphertext using the private key d
    m = pow(ct, d, N)

    # Output 1: Convert decrypted message to bytes (long to byte)
    decrypted_message_bytes = long_to_bytes(m)
    print("Decrypted message (bytes):", decrypted_message_bytes)

    # Output 2: Convert decrypted message back to long (byte to long)
    decrypted_message_long = bytes_to_long(decrypted_message_bytes)
    print("Decrypted message (long):", decrypted_message_long)

    # Output 3: Convert decrypted message to hexadecimal
    decrypted_message_hex = hex(decrypted_message_long)[2:]  # Convert to hex format to see the message
    print("Decrypted message (hex):", decrypted_message_hex)

    # Output 4: Convert decrypted message to ASCII text (if it's valid)
    try:
        decrypted_message_ascii = decrypted_message_bytes.decode('utf-8')
        print("Decrypted message (ASCII):", decrypted_message_ascii)
    except UnicodeDecodeError:
        print("Decrypted message does not appear to be valid ASCII text.")

    # Output 5: Convert decrypted message to decimal
    print("Decrypted message (decimal):", decrypted_message_long)
